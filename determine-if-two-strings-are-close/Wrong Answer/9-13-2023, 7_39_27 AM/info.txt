{"id":1047938039,"lang":"golang","lang_name":"Go","time":"5 days, 11 hours","timestamp":1694565567,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1047938039/","is_pending":"Not Pending","title":"Determine if Two Strings Are Close","memory":"N/A","code":"import \"sort\"\n\n// Check if sorted frequency of characters are the same.\n// Check if set of characters are the same\nfunc closeStrings(word1 string, word2 string) bool {\n    charSet1, charCount1 := getCharSetAndSortedCharCount(word1)\n    charSet2, charCount2 := getCharSetAndSortedCharCount(word2)\n\n    if charSet1 != charSet2 {\n        return false\n    }\n\n    for i := 0; i < 26; i++ {\n        if charCount1[i] != charCount2[i] {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc getCharSetAndSortedCharCount(word string) (int, []int) {\n    charSet := 0\n    sortedCount := make([]int, 26)\n    for _, c := range word {\n        cidx := int(c - 'a')\n\n        charSet |=  cidx\n        sortedCount[cidx] += 1\n    }\n\n    sort.Slice(sortedCount, func(i, j int) bool {\n        return sortedCount[i] < sortedCount[j]\n    })\n\n    return charSet, sortedCount\n}","compare_result":"111111111111101111111111111110111111111111111101111111111111101111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"determine-if-two-strings-are-close","has_notes":false,"flag_type":1}