{"id":1050223186,"lang":"golang","lang_name":"Go","time":"2 days, 20 hours","timestamp":1694793352,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1050223186/","is_pending":"Not Pending","title":"Decode String","memory":"2 MB","code":"func decodeString(s string) string {\n    stack := make([]byte, 0)\n    for i := 0; i < len(s); i++ {\n        if s[i] == ']' {\n            count := len(stack) - 1\n            for stack[count] != '[' {\n                count --                \n            }\n            tmpString := make([]byte, len(stack[count + 1:]))\n            copy(tmpString, stack[count + 1:]) \n\t\t\tstack = stack[:count]\n            var quantityStr string\n\t\t\tfor len(stack) > 0 && (stack[len(stack) - 1] >= '0') && (stack[len(stack) - 1] <= '9') {\n\t\t\t\tquantityStr = string(stack[len(stack)-1]) + quantityStr\n\t\t\t\tstack = stack[:len(stack)-1]\n\t\t\t}\n\t\t\tquantity, _ := strconv.Atoi(quantityStr)\n            for i := 0; i < quantity ; i++ {\n                stack = append(stack, tmpString...)\n            }\n        } else {\n            stack = append(stack, s[i])\n        }\n    }\n    return string(stack)\n}","compare_result":"1111111111111111111111111111111111","title_slug":"decode-string","has_notes":false,"flag_type":1}